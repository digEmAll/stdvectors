// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// stdNumericCreate
SEXP stdNumericCreate(int reserve);
RcppExport SEXP stdvectors_stdNumericCreate(SEXP reserveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type reserve(reserveSEXP);
    rcpp_result_gen = Rcpp::wrap(stdNumericCreate(reserve));
    return rcpp_result_gen;
END_RCPP
}
// stdNumericPushBack
void stdNumericPushBack(SEXP p, Rcpp::NumericVector toAppend);
RcppExport SEXP stdvectors_stdNumericPushBack(SEXP pSEXP, SEXP toAppendSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type toAppend(toAppendSEXP);
    stdNumericPushBack(p, toAppend);
    return R_NilValue;
END_RCPP
}
// stdNumericSize
int stdNumericSize(SEXP p);
RcppExport SEXP stdvectors_stdNumericSize(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdNumericSize(p));
    return rcpp_result_gen;
END_RCPP
}
// stdNumericClear
void stdNumericClear(SEXP p);
RcppExport SEXP stdvectors_stdNumericClear(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    stdNumericClear(p);
    return R_NilValue;
END_RCPP
}
// stdNumericToVector
Rcpp::NumericVector stdNumericToVector(SEXP p);
RcppExport SEXP stdvectors_stdNumericToVector(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdNumericToVector(p));
    return rcpp_result_gen;
END_RCPP
}
// stdNumericSubset
Rcpp::NumericVector stdNumericSubset(SEXP p, Rcpp::IntegerVector indexes);
RcppExport SEXP stdvectors_stdNumericSubset(SEXP pSEXP, SEXP indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indexes(indexesSEXP);
    rcpp_result_gen = Rcpp::wrap(stdNumericSubset(p, indexes));
    return rcpp_result_gen;
END_RCPP
}
// stdNumericReplace
void stdNumericReplace(SEXP p, Rcpp::IntegerVector indexes, Rcpp::NumericVector values);
RcppExport SEXP stdvectors_stdNumericReplace(SEXP pSEXP, SEXP indexesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indexes(indexesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    stdNumericReplace(p, indexes, values);
    return R_NilValue;
END_RCPP
}
// stdNumericErase
void stdNumericErase(SEXP p, int indexFrom, int indexTo);
RcppExport SEXP stdvectors_stdNumericErase(SEXP pSEXP, SEXP indexFromSEXP, SEXP indexToSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type indexFrom(indexFromSEXP);
    Rcpp::traits::input_parameter< int >::type indexTo(indexToSEXP);
    stdNumericErase(p, indexFrom, indexTo);
    return R_NilValue;
END_RCPP
}
// stdNumericClone
SEXP stdNumericClone(SEXP p);
RcppExport SEXP stdvectors_stdNumericClone(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdNumericClone(p));
    return rcpp_result_gen;
END_RCPP
}
// stdIntegerCreate
SEXP stdIntegerCreate(int reserve);
RcppExport SEXP stdvectors_stdIntegerCreate(SEXP reserveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type reserve(reserveSEXP);
    rcpp_result_gen = Rcpp::wrap(stdIntegerCreate(reserve));
    return rcpp_result_gen;
END_RCPP
}
// stdIntegerPushBack
void stdIntegerPushBack(SEXP p, Rcpp::IntegerVector toAppend);
RcppExport SEXP stdvectors_stdIntegerPushBack(SEXP pSEXP, SEXP toAppendSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type toAppend(toAppendSEXP);
    stdIntegerPushBack(p, toAppend);
    return R_NilValue;
END_RCPP
}
// stdIntegerSize
int stdIntegerSize(SEXP p);
RcppExport SEXP stdvectors_stdIntegerSize(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdIntegerSize(p));
    return rcpp_result_gen;
END_RCPP
}
// stdIntegerClear
void stdIntegerClear(SEXP p);
RcppExport SEXP stdvectors_stdIntegerClear(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    stdIntegerClear(p);
    return R_NilValue;
END_RCPP
}
// stdIntegerToVector
Rcpp::IntegerVector stdIntegerToVector(SEXP p);
RcppExport SEXP stdvectors_stdIntegerToVector(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdIntegerToVector(p));
    return rcpp_result_gen;
END_RCPP
}
// stdIntegerSubset
Rcpp::IntegerVector stdIntegerSubset(SEXP p, Rcpp::IntegerVector indexes);
RcppExport SEXP stdvectors_stdIntegerSubset(SEXP pSEXP, SEXP indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indexes(indexesSEXP);
    rcpp_result_gen = Rcpp::wrap(stdIntegerSubset(p, indexes));
    return rcpp_result_gen;
END_RCPP
}
// stdIntegerReplace
void stdIntegerReplace(SEXP p, Rcpp::IntegerVector indexes, Rcpp::IntegerVector values);
RcppExport SEXP stdvectors_stdIntegerReplace(SEXP pSEXP, SEXP indexesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indexes(indexesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type values(valuesSEXP);
    stdIntegerReplace(p, indexes, values);
    return R_NilValue;
END_RCPP
}
// stdIntegerErase
void stdIntegerErase(SEXP p, int indexFrom, int indexTo);
RcppExport SEXP stdvectors_stdIntegerErase(SEXP pSEXP, SEXP indexFromSEXP, SEXP indexToSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type indexFrom(indexFromSEXP);
    Rcpp::traits::input_parameter< int >::type indexTo(indexToSEXP);
    stdIntegerErase(p, indexFrom, indexTo);
    return R_NilValue;
END_RCPP
}
// stdIntegerClone
SEXP stdIntegerClone(SEXP p);
RcppExport SEXP stdvectors_stdIntegerClone(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdIntegerClone(p));
    return rcpp_result_gen;
END_RCPP
}
// stdCharacterCreate
SEXP stdCharacterCreate(int reserve);
RcppExport SEXP stdvectors_stdCharacterCreate(SEXP reserveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type reserve(reserveSEXP);
    rcpp_result_gen = Rcpp::wrap(stdCharacterCreate(reserve));
    return rcpp_result_gen;
END_RCPP
}
// stdCharacterPushBack
void stdCharacterPushBack(SEXP p, Rcpp::CharacterVector toAppend);
RcppExport SEXP stdvectors_stdCharacterPushBack(SEXP pSEXP, SEXP toAppendSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type toAppend(toAppendSEXP);
    stdCharacterPushBack(p, toAppend);
    return R_NilValue;
END_RCPP
}
// stdCharacterSize
int stdCharacterSize(SEXP p);
RcppExport SEXP stdvectors_stdCharacterSize(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdCharacterSize(p));
    return rcpp_result_gen;
END_RCPP
}
// stdCharacterClear
void stdCharacterClear(SEXP p);
RcppExport SEXP stdvectors_stdCharacterClear(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    stdCharacterClear(p);
    return R_NilValue;
END_RCPP
}
// stdCharacterToVector
Rcpp::CharacterVector stdCharacterToVector(SEXP p);
RcppExport SEXP stdvectors_stdCharacterToVector(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdCharacterToVector(p));
    return rcpp_result_gen;
END_RCPP
}
// stdCharacterSubset
Rcpp::CharacterVector stdCharacterSubset(SEXP p, Rcpp::IntegerVector indexes);
RcppExport SEXP stdvectors_stdCharacterSubset(SEXP pSEXP, SEXP indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indexes(indexesSEXP);
    rcpp_result_gen = Rcpp::wrap(stdCharacterSubset(p, indexes));
    return rcpp_result_gen;
END_RCPP
}
// stdCharacterReplace
void stdCharacterReplace(SEXP p, Rcpp::IntegerVector indexes, Rcpp::CharacterVector values);
RcppExport SEXP stdvectors_stdCharacterReplace(SEXP pSEXP, SEXP indexesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indexes(indexesSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type values(valuesSEXP);
    stdCharacterReplace(p, indexes, values);
    return R_NilValue;
END_RCPP
}
// stdCharacterErase
void stdCharacterErase(SEXP p, int indexFrom, int indexTo);
RcppExport SEXP stdvectors_stdCharacterErase(SEXP pSEXP, SEXP indexFromSEXP, SEXP indexToSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type indexFrom(indexFromSEXP);
    Rcpp::traits::input_parameter< int >::type indexTo(indexToSEXP);
    stdCharacterErase(p, indexFrom, indexTo);
    return R_NilValue;
END_RCPP
}
// stdCharacterClone
SEXP stdCharacterClone(SEXP p);
RcppExport SEXP stdvectors_stdCharacterClone(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdCharacterClone(p));
    return rcpp_result_gen;
END_RCPP
}
// stdLogicalCreate
SEXP stdLogicalCreate(int reserve);
RcppExport SEXP stdvectors_stdLogicalCreate(SEXP reserveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type reserve(reserveSEXP);
    rcpp_result_gen = Rcpp::wrap(stdLogicalCreate(reserve));
    return rcpp_result_gen;
END_RCPP
}
// stdLogicalPushBack
void stdLogicalPushBack(SEXP p, Rcpp::LogicalVector toAppend);
RcppExport SEXP stdvectors_stdLogicalPushBack(SEXP pSEXP, SEXP toAppendSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type toAppend(toAppendSEXP);
    stdLogicalPushBack(p, toAppend);
    return R_NilValue;
END_RCPP
}
// stdLogicalSize
int stdLogicalSize(SEXP p);
RcppExport SEXP stdvectors_stdLogicalSize(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdLogicalSize(p));
    return rcpp_result_gen;
END_RCPP
}
// stdLogicalClear
void stdLogicalClear(SEXP p);
RcppExport SEXP stdvectors_stdLogicalClear(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    stdLogicalClear(p);
    return R_NilValue;
END_RCPP
}
// stdLogicalToVector
Rcpp::LogicalVector stdLogicalToVector(SEXP p);
RcppExport SEXP stdvectors_stdLogicalToVector(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdLogicalToVector(p));
    return rcpp_result_gen;
END_RCPP
}
// stdLogicalSubset
Rcpp::LogicalVector stdLogicalSubset(SEXP p, Rcpp::IntegerVector indexes);
RcppExport SEXP stdvectors_stdLogicalSubset(SEXP pSEXP, SEXP indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indexes(indexesSEXP);
    rcpp_result_gen = Rcpp::wrap(stdLogicalSubset(p, indexes));
    return rcpp_result_gen;
END_RCPP
}
// stdLogicalReplace
void stdLogicalReplace(SEXP p, Rcpp::IntegerVector indexes, Rcpp::LogicalVector values);
RcppExport SEXP stdvectors_stdLogicalReplace(SEXP pSEXP, SEXP indexesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indexes(indexesSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type values(valuesSEXP);
    stdLogicalReplace(p, indexes, values);
    return R_NilValue;
END_RCPP
}
// stdLogicalErase
void stdLogicalErase(SEXP p, int indexFrom, int indexTo);
RcppExport SEXP stdvectors_stdLogicalErase(SEXP pSEXP, SEXP indexFromSEXP, SEXP indexToSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type indexFrom(indexFromSEXP);
    Rcpp::traits::input_parameter< int >::type indexTo(indexToSEXP);
    stdLogicalErase(p, indexFrom, indexTo);
    return R_NilValue;
END_RCPP
}
// stdLogicalClone
SEXP stdLogicalClone(SEXP p);
RcppExport SEXP stdvectors_stdLogicalClone(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdLogicalClone(p));
    return rcpp_result_gen;
END_RCPP
}
// stdAnyCreate
SEXP stdAnyCreate(int reserve);
RcppExport SEXP stdvectors_stdAnyCreate(SEXP reserveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type reserve(reserveSEXP);
    rcpp_result_gen = Rcpp::wrap(stdAnyCreate(reserve));
    return rcpp_result_gen;
END_RCPP
}
// stdAnyPushBack
void stdAnyPushBack(SEXP p, SEXP toAppend);
RcppExport SEXP stdvectors_stdAnyPushBack(SEXP pSEXP, SEXP toAppendSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< SEXP >::type toAppend(toAppendSEXP);
    stdAnyPushBack(p, toAppend);
    return R_NilValue;
END_RCPP
}
// stdAnySize
int stdAnySize(SEXP p);
RcppExport SEXP stdvectors_stdAnySize(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdAnySize(p));
    return rcpp_result_gen;
END_RCPP
}
// stdAnyClear
void stdAnyClear(SEXP p);
RcppExport SEXP stdvectors_stdAnyClear(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    stdAnyClear(p);
    return R_NilValue;
END_RCPP
}
// stdAnyToVector
Rcpp::List stdAnyToVector(SEXP p);
RcppExport SEXP stdvectors_stdAnyToVector(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdAnyToVector(p));
    return rcpp_result_gen;
END_RCPP
}
// stdAnySubset
Rcpp::List stdAnySubset(SEXP p, Rcpp::IntegerVector indexes);
RcppExport SEXP stdvectors_stdAnySubset(SEXP pSEXP, SEXP indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indexes(indexesSEXP);
    rcpp_result_gen = Rcpp::wrap(stdAnySubset(p, indexes));
    return rcpp_result_gen;
END_RCPP
}
// stdAnyReplace
void stdAnyReplace(SEXP p, int index, SEXP value);
RcppExport SEXP stdvectors_stdAnyReplace(SEXP pSEXP, SEXP indexSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< SEXP >::type value(valueSEXP);
    stdAnyReplace(p, index, value);
    return R_NilValue;
END_RCPP
}
// stdAnyErase
void stdAnyErase(SEXP p, int indexFrom, int indexTo);
RcppExport SEXP stdvectors_stdAnyErase(SEXP pSEXP, SEXP indexFromSEXP, SEXP indexToSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type indexFrom(indexFromSEXP);
    Rcpp::traits::input_parameter< int >::type indexTo(indexToSEXP);
    stdAnyErase(p, indexFrom, indexTo);
    return R_NilValue;
END_RCPP
}
// stdAnyClone
SEXP stdAnyClone(SEXP p);
RcppExport SEXP stdvectors_stdAnyClone(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(stdAnyClone(p));
    return rcpp_result_gen;
END_RCPP
}
// getTypeFromString
int getTypeFromString(std::string type);
RcppExport SEXP stdvectors_getTypeFromString(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(getTypeFromString(type));
    return rcpp_result_gen;
END_RCPP
}
// getStringFromType
SEXP getStringFromType(int type);
RcppExport SEXP stdvectors_getStringFromType(SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(getStringFromType(type));
    return rcpp_result_gen;
END_RCPP
}
// stdvectorCreate
SEXP stdvectorCreate(std::string type, int reserve);
RcppExport SEXP stdvectors_stdvectorCreate(SEXP typeSEXP, SEXP reserveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type reserve(reserveSEXP);
    rcpp_result_gen = Rcpp::wrap(stdvectorCreate(type, reserve));
    return rcpp_result_gen;
END_RCPP
}
// stdvectorPushBack
void stdvectorPushBack(Rcpp::List sdv, SEXP values);
RcppExport SEXP stdvectors_stdvectorPushBack(SEXP sdvSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::List >::type sdv(sdvSEXP);
    Rcpp::traits::input_parameter< SEXP >::type values(valuesSEXP);
    stdvectorPushBack(sdv, values);
    return R_NilValue;
END_RCPP
}
// stdvectorSize
int stdvectorSize(Rcpp::List sdv);
RcppExport SEXP stdvectors_stdvectorSize(SEXP sdvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type sdv(sdvSEXP);
    rcpp_result_gen = Rcpp::wrap(stdvectorSize(sdv));
    return rcpp_result_gen;
END_RCPP
}
// stdvectorClear
void stdvectorClear(Rcpp::List sdv);
RcppExport SEXP stdvectors_stdvectorClear(SEXP sdvSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::List >::type sdv(sdvSEXP);
    stdvectorClear(sdv);
    return R_NilValue;
END_RCPP
}
// stdvectorToVector
SEXP stdvectorToVector(Rcpp::List sdv);
RcppExport SEXP stdvectors_stdvectorToVector(SEXP sdvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type sdv(sdvSEXP);
    rcpp_result_gen = Rcpp::wrap(stdvectorToVector(sdv));
    return rcpp_result_gen;
END_RCPP
}
// stdvectorSubset
SEXP stdvectorSubset(Rcpp::List sdv, Rcpp::IntegerVector indexes);
RcppExport SEXP stdvectors_stdvectorSubset(SEXP sdvSEXP, SEXP indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type sdv(sdvSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indexes(indexesSEXP);
    rcpp_result_gen = Rcpp::wrap(stdvectorSubset(sdv, indexes));
    return rcpp_result_gen;
END_RCPP
}
// stdvectorReplace
void stdvectorReplace(Rcpp::List sdv, Rcpp::IntegerVector indexes, SEXP values);
RcppExport SEXP stdvectors_stdvectorReplace(SEXP sdvSEXP, SEXP indexesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::List >::type sdv(sdvSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indexes(indexesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type values(valuesSEXP);
    stdvectorReplace(sdv, indexes, values);
    return R_NilValue;
END_RCPP
}
// stdvectorErase
void stdvectorErase(Rcpp::List sdv, int indexFrom, int indexTo);
RcppExport SEXP stdvectors_stdvectorErase(SEXP sdvSEXP, SEXP indexFromSEXP, SEXP indexToSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::List >::type sdv(sdvSEXP);
    Rcpp::traits::input_parameter< int >::type indexFrom(indexFromSEXP);
    Rcpp::traits::input_parameter< int >::type indexTo(indexToSEXP);
    stdvectorErase(sdv, indexFrom, indexTo);
    return R_NilValue;
END_RCPP
}
// stdvectorClone
SEXP stdvectorClone(Rcpp::List sdv);
RcppExport SEXP stdvectors_stdvectorClone(SEXP sdvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type sdv(sdvSEXP);
    rcpp_result_gen = Rcpp::wrap(stdvectorClone(sdv));
    return rcpp_result_gen;
END_RCPP
}
